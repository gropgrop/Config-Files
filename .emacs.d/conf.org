#+title: Emacs Config
#+author:
#+STARTUP: content

* Making sure emacs doesn't pollute my stuff :)
  This section just ensures that emacs' customize output does not squirt into my config. neato.

#+begin_src emacs-lisp
(setq custom-file (concat user-emacs-directory "auto.el"))
(if (file-exists-p custom-file)
    (load-file custom-file))
#+end_src

* Bootstrapping
  Of course, we need our package archives.
#+begin_src emacs-lisp
(require 'package)
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
 		   ("melpa" . "https://melpa.org/packages/")
		   ("org" . "http://orgmode.org/elpa/")))
(package-initialize)
#+end_src

Now, for a bunch of other neat stuff:

#+begin_src emacs-lisp
(eval-after-load 'gnutls
  '(add-to-list 'gnutls-trustfiles "/etc/ssl/cert.pem"))
(unless (package-installed-p 'async)
  (package-refresh-contents)
  (package-install 'async))
(unless (package-installed-p 'quelpa)
  (with-temp-buffer
    (url-insert-file-contents "https://raw.githubusercontent.com/quelpa/quelpa/master/quelpa.el")
    (eval-buffer)
    (quelpa-self-upgrade)))
(let ((path (concat (file-name-as-directory (concat user-emacs-directory "quelpa")) "melpa")))
  (if (not (file-exists-p path))
      (make-directory path))
  (let ((path (concat (file-name-as-directory path) "recipes")))
    (if (not (file-exists-p path))
	(make-directory path))))
(setq use-package-always-ensure t) ; docs say this is deprecated but things break when it's not included

(quelpa
 '(quelpa-use-package
   :fetcher git
   :url "https://github.com/quelpa/quelpa-use-package.git"))
(require 'quelpa-use-package)

(use-package use-package-ensure-system-package
  :ensure t)
#+end_src

* Theme + Modeline + Neat stuff
  First, all the icons. This is necessary for doom-modeline. After initalization, you MUST RUN M-x all-the-icons-install-fonts. I wish i knew a workaround at the moment. Also sets up org-bullets, and rainbow delimiters. doom-old-hope is nice, for my light theme i like to use doom-gruvbox-light.

#+begin_src emacs-lisp
(use-package all-the-icons
  :if (display-graphic-p))

(use-package doom-themes
  :config
  (load-theme 'doom-old-hope t)
  (set-face-attribute 'default nil :family "CaskaydiaCove Nerd Font Mono" :height 95))

(use-package rainbow-delimiters
  :config
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))

;custom runs: after package loaded, init runs before 
(use-package doom-modeline
  :after all-the-icons
  :hook
  (after-init . doom-modeline-mode))
#+end_src

* Getting rid of dumb keybinds

  goodbye stinky

#+begin_src emacs-lisp
(global-unset-key (kbd "C-z"))
(global-unset-key (kbd "C-x C-z"))
#+end_src

* Matlab

EEEEEEEEE
#+begin_src emacs-lisp
;; 1. MATLAB
;; (load-library "matlab-load")            ; in MELPA
(add-to-list 'load-path "/home/ched/.emacs.d/matlab-mode/matlab-emacs-src~")
(require 'matlab-load)
(autoload 'matlab-mode "matlab" "Matlab Editing Mode" t)
(setq exec-path (append exec-path '("/home/ched/mathworks/r2021b/bin")))
;; customization
(setq matlab-indent-level 4)
(setq matlab-highlight-block-match-flag t)
(setq matlab-shell-command-switches '("-nodesktop -nosplash"))

; enable CEDET---not sure what it's useful for
(matlab-cedet-setup)

; matlab-mode has support for Completion engine. Using tools in CEDET, Emacs
; will parse your M files and provide pretty good completion and code
; decoration.

; enable MLINT
(setq mlint-programs (quote ("/home/ched/mathworks/r2021b/bin/glnxa64/mlint")))
(add-hook 'matlab-mode-hook (lambda () (mlint-minor-mode 1)))
(setq matlab-show-mlint-warnings t)
(setq matlab-highlight-cross-function-variables t)
;; For R, need install.packages("lintr")


; Customize comment string to '%' only rather than '% $$$'
(setq matlab-comment-region-s "% ")
#+end_src

#+RESULTS:
: % 

* Org
** Org-Roam
  Org roam is neat, organizes everything in a folder stored in home directory titled: .orgfiles. Within this directory, you must create a folder titled "images" for org-download.

#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory (file-truename "~/.orgfiles"))
    (org-roam-completion-everywhere t)
    (org-roam-v2-ack t)
    :bind (("C-c n l" . org-roam-buffer-toggle)
	   ("C-c n f" . org-roam-node-find)
	   ("C-c n g" . org-roam-graph)
	   ("C-c n i" . org-roam-node-insert)
	   ;; dailies
	   ("C-c n j" . org-roam-dailies-capture-today)
	   :map org-mode-map
	   ("C-M-i"   . completion-at-point))
    :config
    (org-roam-db-autosync-mode)
  ;; if using org-roam-protocol
    (require 'org-roam-protocol))

  (setq org-roam-mode-section-functions
	(list #'org-roam-backlinks-section
	      #'org-roam-reflinks-section
	      #'org-roam-unlinked-references-section
	      ))

  (add-to-list 'display-buffer-alist
	       '("\\*org-roam\\*"
		 (display-buffer-in-direction)
		 (direction . right)
		 (window-width . 0.33)
		 (window-height . fit-window-to-buffer)))
#+end_src

And to suppress the org roam migrate warning

#+begin_src emacs-lisp
(setq org-roam-v2-ack t)
#+end_src

** Org-Download
  A neat utility to include screenshots in org files

#+begin_src emacs-lisp
  (use-package org-download
    :after org
    :custom
    (org-download-image-dir "~/.orgfiles/images")
    (org-download-timestamp "\"\"")
    (org-download-screenshot-method "flameshot")
    (org-download-backend "wget")
    :bind
    (:map org-mode-map
	  (("s-Y" . org-download-screenshot)
	   ("s-y" . org-download-clipboard))))
#+end_src

There is a small issue with org download at the moment, images must be on the clipboard initially. s-Y DOES NOT WORK. Screenshots are saved, yet do not get inserted into the buffer. emacs just freezes. Use screenshot machine of your choice, and use s-y to insert it into the buffer. The screenshot will also be saved to the ~/.orgfiles/images directory. Remember, you must make that directory.

This link https://github.com/abo-abo/org-download/pull/165/commits/cfc8790a28d29ddc285153977d2fc52cd96caabc Outlines changes, that will suppress the generation of the #+Download tag.

** General Org
  Showing inline images:
#+begin_src emacs-lisp
(setq org-display-inline-images t)
(setq org-redisplay-inline-images t)
(setq org-startup-with-inline-images "inlineimages")
#+end_src
  Org Agenda Path: nevermind lmfao I deleted this shit


(defun sa-find-org-file-recursively (&optional directory filext)
    "Return .org and .org_archive files recursively from DIRECTORY.
  If FILEXT is provided, return files with extension FILEXT instead."
    (interactive "DDirectory: ")
    (let* (org-file-list
	   (case-fold-search t)	      ; filesystems are case sensitive
	   (file-name-regex "^[^.#].*") ; exclude dot, autosave, and backup files
	   (filext (or filext "org$\\\|org_archive"))
	   (fileregex (format "%s\\.\\(%s$\\)" file-name-regex filext))
	   (cur-dir-list (directory-files directory t file-name-regex)))
      ;; loop over directory listing
      (dolist (file-or-dir cur-dir-list org-file-list) ; returns org-file-list
	(cond
	 ((file-regular-p file-or-dir) ; regular files
	  (if (string-match fileregex file-or-dir) ; org files
	      (add-to-list 'org-file-list file-or-dir)))
	 ((file-directory-p file-or-dir)
	  (dolist (org-file (sa-find-org-file-recursively file-or-dir filext)
			    org-file-list) ; add files found to result
	    (add-to-list 'org-file-list org-file)))))))
(setq org-agenda-text-search-extra-files
      (append (sa-find-org-file-recursively "~/.orgfiles")
              (sa-find-org-file-recursively "~/.orgfiles/daily")))

#+BEGIN_SRC emacs-lisp
(setq org-agenda-files '("~/.orgfiles/daily"))
#+END_SRC

Electric indent mode is nice, but it can be a big pain in org-mode. 

#+begin_src emacs-lisp
(add-hook 'org-mode-hook (lambda() (electric-indent-local-mode -1)))
#+end_src

** Org Babel
  For org-babel, we need to load our languages. 
#+begin_src emacs-lisp
(setq org-babel-default-header-args:matlab
 '((:results . "output") (:session . "*MATLAB*")))

(org-babel-do-load-languages
'org-babel-load-languages
'((python . t) 
  (matlab . t)))
#+end_src

From some dude on stackexchange (explanation inside)

#+begin_src emacs-lisp
(require 'ob-octave-fix.el nil t)
#+end_src

#+RESULTS:

Default header args for matlab ;)

#+begin_src emacs-lisp
(setq org-babel-default-header-args:matlab
  '((:results . "output") (:session . "*MATLAB*")))
#+end_src

#+RESULTS:


* LaTeX

Just borrowed from devins config, who probably borrowed it from someone else.

#+begin_src emacs-lisp
(require 'ox-publish)

(use-package org
  :ensure org-plus-contrib
  :init
  (setq org-support-shift-select t)
  (setq org-src-fontify-natively t
        org-confirm-babel-evaluate nil
        org-src-preserve-indentation t)
  :config
  (require 'ox-extra)
  (ox-extras-activate '(ignore-headlines))
  :custom
  (org-latex-listings 'minted)
  (org-latex-minted-options '(("frame" "lines") ("linenos=true")))
  (org-latex-packages-alist '(("" "minted")))
  (org-html-doctype "html5")    ; default to HTML5 output
  (org-html-html5-fancy t)              ; enable fancy new tags
  (org-html-postamble nil)              ; disable the postamble
  (org-html-postamble-format '(("en" "<hr></hr><p class=\"author\">Author: %a</p><p class=\"date\">Date: %d</p>")))
  (org-html-preamble nil)               ; disable the preamble
  (org-html-metadata-timestamp-format "%u, %B %e, %Y")
  (org-preview-latex-process-alist
   (quote
    ((dvipng :programs ("lualatex" "dvipng")
             :description "dvi > png" :message "you need to install the programs: latex and dvipng." :image-input-type "dvi" :image-output-type "png" :image-size-adjust
             (1.0 . 1.0)
             :latex-compiler
             ("lualatex -output-format dvi -interaction nonstopmode -output-directory %o %f")
             :image-converter
             ("dvipng -fg %F -bg %B -D %D -T tight -o %O %f"))
     (dvisvgm :programs ("latex" "dvisvgm")
              :description "dvi > svg" :message "you need to install the programs: latex and dvisvgm." :use-xcolor t :image-input-type "xdv" :image-output-type "svg" :image-size-adjust
              (1.7 . 1.5) :latex-compiler
              ("xelatex -no-pdf -interaction nonstopmode -output-directory %o %f")
              :image-converter ("dvisvgm %f -n -b min -c %S -o %O"))
     (imagemagick :programs
                  ("latex" "convert")
                  :description "pdf > png" :message "you need to install the programs: latex and imagemagick." :use-xcolor t :image-input-type "pdf" :image-output-type "png" :image-size-adjust
                  (1.0 . 1.0)
                  :latex-compiler
                  ("xelatex -no-pdf -interaction nonstopmode -output-directory %o %f")
                  :image-converter
                  ("convert -density %D -trim -antialias %f -quality 100 %O")))))
  (org-preview-latex-default-process 'dvisvgm)
  :config
  (add-hook 'org-mode-hook
            (lambda ()
              (org-indent-mode)
              (visual-line-mode)
              (flyspell-mode)))
  (require 'ox-latex)
  (add-to-list 'org-latex-classes
               '("apa7"
                 "\\documentclass{apa7}
\\usepackage{natbib}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  (add-to-list 'org-latex-classes
               '("IEEE"
                 "\\documentclass{IEEEtran}
\\usepackage{cite}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")))
  (add-to-list 'org-latex-classes
               '("manual"
                 "\\documentclass{memoir}
\\usepackage{natbib}
\\openany
\\usepackage{etoolbox}
\\makeatletter
\\patchcmd{\\@smemmain}{\\cleardoublepage}{\\clearpage}{}{}
\\patchcmd{\\@smemmain}{\\cleardoublepage}{\\clearpage}{}{}
\\def\\maketitle{%
  \\null
  \\thispagestyle{empty}%
  \\vfill
  \\begin{center}\\leavevmode
    \\normalfont
    {\\LARGE\\raggedleft \\@author\\par}%
    \\hrulefill\\par
    {\\huge\\raggedright \\@title\\par}%
    \\vskip 1cm
%    {\\Large \\@date\\par}%
  \\end{center}%
  \\vfill
  \\null
  \\clearpage
  }
\\frontmatter
\\makeatother
\\headstyles{memman}
\\chapterstyle{demo3}"
                 ("\\chapter{%s}" . "\\chapter*{%s}")
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
  (add-to-list 'org-latex-classes
               '("memo"
                 "\\documentclass[12pt]{article}
\\usepackage{natbib}
\\makeatletter
\\renewcommand\\section{\\@startsection {section}{1}{\\z@}
                                   {-0.75ex \\@plus -0.3ex \\@minus -.1ex}
                                   {0.5ex \\@plus.02ex}
                                   {\\normalfont\\large\\bfseries}}
\\renewcommand\\subsection{\\@startsection {section}{2}{\\z@}
                                   {-0.5ex \\@plus -0.2ex \\@minus -.1ex}
                                   {0.333ex \\@plus.02ex}
                                   {\\normalfont\\normalsize\\underline}}
\\renewcommand\\subsubsection{\\@startsection {section}{3}{\\z@}
                                   {-0.25ex \\@plus -0.1ex \\@minus -0ex}
                                   {0.167ex \\@plus.02ex}
                                   {\\normalfont\\normalsize\\textit}}
\\makeatother"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
  (customize-set-value 'org-latex-hyperref-template "\\hypersetup{
 pdfauthor={%a},
 pdftitle={%t},
 pdfkeywords={%k},
 pdfsubject={%d},
 pdfcreator={%c}, 
 pdflang={%L},
pdflinkmargin=1pt,
pdfborderstyle={/S/U/W 1}}\n"))
#+end_src

* Autocomplete

Initially, I was gonna use eglot. Then I decided to use company. Then i just decided to use auto-complete, jedi, and irony mode.

#+begin_src emacs-lisp
  (use-package auto-complete
    :ensure t
    :init
    (progn
      (ac-config-default)
      (global-auto-complete-mode t)))

  (use-package jedi
    :ensure t
    :init
    (add-hook 'python-mode-hook 'jedi:setup)
    (add-hook 'python-mode-hook 'jedi:ac-setup))
#+end_src
Jedi requires that virtualenv is installed, via pip install virtualenv

* Yasnippet
snippets n stuff!

#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode t))
#+end_src
Now, add some ez default snippets

#+begin_src emacs-lisp
  (use-package yasnippet-snippets
    :ensure t)
#+end_src

* Some neat stuff
  Here, I have pdf-tools, a better pdf viewer within emacs, dired+, and a nifty dashboard configured. When setting up, make sure you have the images. Here's mine :) (definitely won't show outside of my computer lol)
It doesn't paste gifs. Whatever.

#+begin_src emacs-lisp
(use-package pdf-tools
  :config (pdf-tools-install))

(use-package dired+
  :quelpa (dired+ :fetcher github :repo "emacsmirror/dired-plus"))

(use-package dashboard
  :ensure t
  :init 
  (setq dashboard-items '((recents  . 5)))
    (setq dashboard-set-navigator t)
    (setq dashboard-startup-banner "~/emacssplash/foiled-again.gif")
    (setq dashboard-banner-logo-title "                                        ")
    :config
    (dashboard-setup-startup-hook))
#+end_src

* Misc odds-and-ends
  Initial scratch message, visual tweaks, powerline stuff (not sure i even need that, latex-mode stuff, yknow.
#+begin_src emacs-lisp
(use-package verilog-mode)

(setq initial-scratch-message "")
(menu-bar-mode -1)
(scroll-bar-mode -1)
(tool-bar-mode -1)
(global-visual-line-mode 1)
(setq powerline-default-separator 'arrow-fade)
(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq TeX-engine 'xetex)
(setq TeX-PDF-mode t)
(setq-default TeX-master nil)
#+end_src

* Theme Toggling
  Courtesy of Maxim Kim.
  Toggle between light mode and dark mode

#+begin_src emacs-lisp
  (defvar *haba-theme-dark* 'doom-old-hope)
  (defvar *haba-theme-light* 'doom-gruvbox-light)
  (defvar *haba-current-theme* *haba-theme-dark*)

  ;; disable other themes before loading new one
  (defadvice load-theme (before theme-dont-propagate activate)
    "Disable theme before loading new one."
    (mapc #'disable-theme custom-enabled-themes))


  (defun haba/next-theme (theme)
    (if (eq theme 'default)
	(disable-theme *haba-current-theme*)
      (progn
	(load-theme theme t)))
    (setq *haba-current-theme* theme))

  (defun haba/toggle-theme ()
    (interactive)
    (cond ((eq *haba-current-theme* *haba-theme-dark*) (haba/next-theme *haba-theme-light*))
	  ((eq *haba-current-theme* *haba-theme-light*) (haba/next-theme 'default))
	  ((eq *haba-current-theme* 'default) (haba/next-theme *haba-theme-dark*))))
  (global-set-key [C-tab] 'haba/toggle-theme)
#+end_src


  








* C# Weirdness
don't worry about this, honestly.

#+begin_src emacs-lisp
  (use-package powershell
       :ensure t)
#+end_src
